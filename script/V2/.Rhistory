# Tracks
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(start = df1$start, end = df1$end, name = kmer, fill = "red")
# Load required libraries
library(Biostrings)
library(Gviz)
library(GenomicRanges)
# Reading the genome and searching for the kmer
genome_vir <- readDNAStringSet("../data/vector/reference/GCF_002204515.2_genomic_refseq.fna")[[1]]
# Reading the genome and searching for the kmer
genome_vir <- readDNAStringSet("../data/vector/reference/GCF_002204515.2_genomic_refseq.fna")[[1]]
kmer <- "ACAAGA"
kmer_pos <- matchPattern(kmer, genome_vir)
kmer_starts <- start(kmer_pos)
kmer_ends <- end(kmer_pos)
kmer_ends <- end(kmer_pos)
# Convert to IRanges object for memory efficiency
kmer_ranges <- IRanges(start = kmer_starts, end = kmer_ends)
# Plotting setup
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(kmer_ranges, name = kmer, fill = "red")
kmerTrack1 <- AnnotationTrack(kmer_ranges, name = kmer, fill = "red",chr = 1)
kmerTrack1 <- AnnotationTrack(kmer_ranges, name = kmer, fill = "red")
kmerTrack1 <- AnnotationTrack(kmer_ranges, name = kmer, fill = "red", chromosome = "chr1")
# Load required libraries
library(Biostrings)
library(Gviz)
# Read the genome and search for the kmer
genome_vir <- readDNAStringSet("../data/vector/reference/GCF_002204515.2_genomic_refseq.fna")[[1]]
# Read the genome and search for the kmer
genome_vir <- readDNAStringSet("../data/vector/reference/GCF_002204515.2_genomic_refseq.fna")[[1]]
kmer <- "ACAAGA"
kmer_pos <- matchPattern(kmer, genome_vir)
kmer_starts <- start(kmer_pos)
kmer_ends <- end(kmer_pos)
# Create a data frame with chromosome information
df1 <- data.frame(start = kmer_starts, end = kmer_ends, chromosome = "chr1", strand = "+")
# Set up tracks for plotting
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(start = df1$start, end = df1$end, chromosome = df1$chromosome,
strand = df1$strand, name = kmer, fill = "red")
get_dist_stats <- function(df_virus) {
virus_values <- df_virus %>%
group_by(Kmer) %>%
summarize(log10_segm_size = list(na.omit(log10_segm_size)),
count = n(), .groups = 'drop')  # Count appearances
results <- data.frame(Kmer = character(),
mean_virus = numeric(),
sd_virus = numeric(),
count = integer(),  # Added count column
stringsAsFactors = FALSE)
for (kmer in virus_values$Kmer) {
virus_sizes <- unlist(virus_values$log10_segm_size[virus_values$Kmer == kmer])
mean_virus <- ifelse(length(virus_sizes) > 0, mean(virus_sizes, na.rm = TRUE), NA)
sd_virus <- ifelse(length(virus_sizes) > 1, sd(virus_sizes, na.rm = TRUE), NA)
count <- virus_values$count[virus_values$Kmer == kmer]  # Get count
results <- rbind(results, data.frame(
Kmer = kmer,
mean_virus = mean_virus,
sd_virus = sd_virus,
count = count  # Add count to results
))
}
return(results)
}
results <- get_dist_stats(v_kmer_pos_df)
virus_name <- "dengue_virus_type_1"
k <- 6
x <- 100
size <- "1000000"
virus_name <- "dengue_virus_type_1"
k <- 6
x <- 100
size <- "1000000"
```{r}
v_fasta_file <- paste("../data/virus/reference/", virus_name, ".fasta", sep = "")
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
v_kmer_pos_df <- gen_kmers_pos_df(v_fasta_file,best_kmers_list,virus_name)
get_dist_stats <- function(df_virus) {
virus_values <- df_virus %>%
group_by(Kmer) %>%
summarize(log10_segm_size = list(na.omit(log10_segm_size)),
count = n(), .groups = 'drop')  # Count appearances
results <- data.frame(Kmer = character(),
mean_virus = numeric(),
sd_virus = numeric(),
count = integer(),  # Added count column
stringsAsFactors = FALSE)
for (kmer in virus_values$Kmer) {
virus_sizes <- unlist(virus_values$log10_segm_size[virus_values$Kmer == kmer])
mean_virus <- ifelse(length(virus_sizes) > 0, mean(virus_sizes, na.rm = TRUE), NA)
sd_virus <- ifelse(length(virus_sizes) > 1, sd(virus_sizes, na.rm = TRUE), NA)
count <- virus_values$count[virus_values$Kmer == kmer]  # Get count
results <- rbind(results, data.frame(
Kmer = kmer,
mean_virus = mean_virus,
sd_virus = sd_virus,
count = count  # Add count to results
))
}
return(results)
}
results <- get_dist_stats(v_kmer_pos_df)
results
results_df
count_specific_kmer_in_fastq <- function(fq, specific_kmer) {
sequences <- as.character(sread(fq))
kmer_count <- 0
total_size <- 0
for (seq in sequences) {
total_size <- total_size + nchar(seq)
kmer_count <- kmer_count + (gregexpr(specific_kmer, seq, fixed = TRUE)[[1]] != -1) %>% sum()
}
ratio <- if (total_size > 0) {
kmer_count / total_size
} else {
0
}
return(list(kmer_count = kmer_count, ratio = ratio))
}
calculate_kmer_frequencies <- function(results, fq) {
kmers <- results$Kmer
results$kmer_count <- numeric(length(kmers))
results$ratio <- numeric(length(kmers))
for (i in seq_along(kmers)) {
kmer <- kmers[i]
result <- count_specific_kmer_in_fastq(fq, kmer)
results$kmer_count[i] <- result$kmer_count
results$ratio[i] <- result$ratio
}
return(results)
}
fq <- readFastq("../data/testing_data/SRR23079314_1.fastq")
results <- calculate_kmer_frequencies(results, fq)
results <- calculate_kmer_frequencies(results, fq)
results$frequency_virus <- 1 / (10 ^ results$mean_virus)
library(ggplot2)
# Assuming results already contains the necessary columns
# Create new columns for the X and Y axes
results$x_value <- results$  # X-axis values
results$y_value <- results$frequency_virus / results$ratio  # Y-axis values
# Plotting with kmer names as labels
ggplot(results, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
# Assuming results already contains the necessary columns
# Create new columns for the X and Y axes
results$x_value <- results$  # X-axis values
results$y_value <- results$frequency_virus / results$ratio  # Y-axis values
# Assuming results already contains the necessary columns
# Create new columns for the X and Y axes
results$x_value <- results$count/results$sd_virus  # X-axis values
results$y_value <- results$frequency_virus / results$ratio  # Y-axis values
# Plotting with kmer names as labels
ggplot(results, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
genome_vir <- readDNAStringSet("../data/virus/reference/dengue_virus_type_1.fasta")[[1]]
kmer <- "GAGCAG"
kmer_pos <- matchPattern(kmer, genome_vir)
kmer_starts <- start(kmer_pos)
kmer_ends <- end(kmer_pos)
kmer2 <- "ACAAGA"
kmer_pos2 <- matchPattern(kmer2, genome_vir)
kmer_starts2 <- start(kmer_pos2)
kmer_ends2 <- end(kmer_pos2)
df1 <- data.frame(start = kmer_starts, end = kmer_ends, strand = "+")
df2 <- data.frame(start = kmer_starts2, end = kmer_ends2, strand = "+")
# Tracks
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(start = df1$start, end = df1$end, name = kmer, fill = "red", chromosome = "chr1")
kmerTrack2 <- AnnotationTrack(start = df2$start, end = df2$end, name = kmer2, fill = "blue", chromosome = "chr1")
genome_length <- nchar(genome_vir)
plotTracks(list(genomeTrack, kmerTrack1, kmerTrack2), from = 1, to = genome_length, margin = 10,sizes=c(0.5,0.5,0.5), stacking = "dense")
# Assuming results already contains the necessary columns
# Create new columns for the X and Y axes
results$x_value <- results$count/results$sqrt(sd_virus)  # X-axis values
# Assuming results already contains the necessary columns
# Create new columns for the X and Y axes
results$x_value <- results$count/sqrt(results$sd_virus)  # X-axis values
results$y_value <- results$frequency_virus / results$ratio  # Y-axis values
# Plotting with kmer names as labels
ggplot(results, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
kmer <- "AAAAGA"
kmer_pos <- matchPattern(kmer, genome_vir)
kmer_starts <- start(kmer_pos)
kmer_ends <- end(kmer_pos)
kmer2 <- "ACAAGA"
kmer_pos2 <- matchPattern(kmer2, genome_vir)
kmer_starts2 <- start(kmer_pos2)
kmer_ends2 <- end(kmer_pos2)
df1 <- data.frame(start = kmer_starts, end = kmer_ends, strand = "+")
df2 <- data.frame(start = kmer_starts2, end = kmer_ends2, strand = "+")
# Tracks
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(start = df1$start, end = df1$end, name = kmer, fill = "red", chromosome = "chr1")
kmerTrack2 <- AnnotationTrack(start = df2$start, end = df2$end, name = kmer2, fill = "blue", chromosome = "chr1")
genome_length <- nchar(genome_vir)
plotTracks(list(genomeTrack, kmerTrack1, kmerTrack2), from = 1, to = genome_length, margin = 10,sizes=c(0.5,0.5,0.5), stacking = "dense")
kmer <- "TTAGAG"
kmer_pos <- matchPattern(kmer, genome_vir)
kmer_starts <- start(kmer_pos)
kmer_ends <- end(kmer_pos)
kmer2 <- "ACAAGA"
kmer_pos2 <- matchPattern(kmer2, genome_vir)
kmer_starts2 <- start(kmer_pos2)
kmer_ends2 <- end(kmer_pos2)
df1 <- data.frame(start = kmer_starts, end = kmer_ends, strand = "+")
df2 <- data.frame(start = kmer_starts2, end = kmer_ends2, strand = "+")
# Tracks
genomeTrack <- GenomeAxisTrack()
kmerTrack1 <- AnnotationTrack(start = df1$start, end = df1$end, name = kmer, fill = "red", chromosome = "chr1")
kmerTrack2 <- AnnotationTrack(start = df2$start, end = df2$end, name = kmer2, fill = "blue", chromosome = "chr1")
genome_length <- nchar(genome_vir)
plotTracks(list(genomeTrack, kmerTrack1, kmerTrack2), from = 1, to = genome_length, margin = 10,sizes=c(0.5,0.5,0.5), stacking = "dense")
results$y_value <- log2(results$frequency_virus / results$ratio)  # Y-axis values
# Plotting with kmer names as labels
ggplot(results, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
virus_name <- "dengue_virus_type_1"
k <- 6
x <- 100
size <- "1000000"
virus_name <- "dengue_virus_type_1"
k <- 6
x <- 100
size <- "1000000"
```{r}
v_fasta_file <- paste("../data/virus/reference/", virus_name, ".fasta", sep = "")
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
v_kmer_pos_df <- gen_kmers_pos_df(v_fasta_file,best_kmers_list,virus_name)
get_t_test_single <- function(df_virus) {
virus_values <- df_virus %>%
group_by(Kmer) %>%
summarize(log10_segm_size = list(na.omit(log10_segm_size)), .groups = 'drop')
results <- data.frame(Kmer = character(),
mean_virus = numeric(),
sd_virus = numeric(),
stringsAsFactors = FALSE)
for (kmer in virus_values$Kmer) {
virus_sizes <- unlist(virus_values$log10_segm_size[virus_values$Kmer == kmer])
mean_virus <- ifelse(length(virus_sizes) > 0, mean(virus_sizes, na.rm = TRUE), NA)
sd_virus <- ifelse(length(virus_sizes) > 1, sd(virus_sizes, na.rm = TRUE), NA)
results <- rbind(results, data.frame(
Kmer = kmer,
mean_virus = mean_virus,
sd_virus = sd_virus
))
}
return(results)
}
library(Biostrings)
library(stringr)
library(dplyr)
library(ggplot2)
library(purrr)
library(kmers.profile)
virus_name <- "dengue_virus_type_1"
k <- 6
x <- 100
size <- "1000000"
v_fasta_file <- paste("../data/virus/reference/", virus_name, ".fasta", sep = "")
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
v_kmer_pos_df <- gen_kmers_pos_df(v_fasta_file,best_kmers_list,virus_name)
setwd("~/Documents/University/ULB/Stage/CTMA/CTMA_Internship_MobVec_Viral_KMERS/script")
v_fasta_file <- paste("../data/virus/reference/", virus_name, ".fasta", sep = "")
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
v_fasta_file <- paste("../data_processed//virus/reference/", virus_name, ".fasta", sep = "")
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
best_kmers_list <- gen_spe_first_obs_kmers(v_fasta_file,k,x)
v_kmer_pos_df <- gen_kmers_pos_df(v_fasta_file,best_kmers_list,virus_name)
get_t_test_single <- function(df_virus) {
virus_values <- df_virus %>%
group_by(Kmer) %>%
summarize(log10_segm_size = list(na.omit(log10_segm_size)), .groups = 'drop')
results <- data.frame(Kmer = character(),
mean_virus = numeric(),
sd_virus = numeric(),
stringsAsFactors = FALSE)
for (kmer in virus_values$Kmer) {
virus_sizes <- unlist(virus_values$log10_segm_size[virus_values$Kmer == kmer])
mean_virus <- ifelse(length(virus_sizes) > 0, mean(virus_sizes, na.rm = TRUE), NA)
sd_virus <- ifelse(length(virus_sizes) > 1, sd(virus_sizes, na.rm = TRUE), NA)
results <- rbind(results, data.frame(
Kmer = kmer,
mean_virus = mean_virus,
sd_virus = sd_virus
))
}
return(results)
}
results <- get_t_test_single(v_kmer_pos_df)
count_specific_kmer_in_fastq <- function(fq, specific_kmer) {
sequences <- as.character(sread(fq))
kmer_count <- 0
total_size <- 0
for (seq in sequences) {
total_size <- total_size + nchar(seq)
kmer_count <- kmer_count + (gregexpr(specific_kmer, seq, fixed = TRUE)[[1]] != -1) %>% sum()
}
ratio <- if (total_size > 0) {
kmer_count / total_size
} else {
0
}
return(list(kmer_count = kmer_count, ratio = ratio))
}
calculate_kmer_frequencies <- function(results_df, fq) {
kmers <- results_df$Kmer
results_df$kmer_count <- numeric(length(kmers))
results_df$ratio <- numeric(length(kmers))
for (i in seq_along(kmers)) {
kmer <- kmers[i]
result <- count_specific_kmer_in_fastq(fq, kmer)
results_df$kmer_count[i] <- result$kmer_count
results_df$ratio[i] <- result$ratio
}
return(results_df)
}
fq <- readFastq("../data_processed//testing_data/SRR23079314_1.fastq")
results_df <- calculate_kmer_frequencies(results, fq)
results_df <- calculate_kmer_frequencies(results, fq)
results_df$frequency_virus <- 1 / (10 ^ results_df$mean_virus)
library(ggplot2)
# Create new columns for the X and Y axes
results_df$x_value <- 1 / results_df$sd_virus  # X-axis values
results_df$y_value <- results_df$frequency_virus / results_df$ratio  # Y-axis values
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
get_stats_segments <- function(df_virus) {
virus_values <- df_virus %>%
group_by(Kmer) %>%
summarize(log10_segm_size = list(na.omit(log10_segm_size)),
count = n(), .groups = 'drop')
results <- data.frame(Kmer = character(),
mean_virus = numeric(),
sd_virus = numeric(),
count = integer(),
stringsAsFactors = FALSE)
for (kmer in virus_values$Kmer) {
virus_sizes <- unlist(virus_values$log10_segm_size[virus_values$Kmer == kmer])
mean_virus <- ifelse(length(virus_sizes) > 0, mean(virus_sizes, na.rm = TRUE), NA)
sd_virus <- ifelse(length(virus_sizes) > 1, sd(virus_sizes, na.rm = TRUE), NA)
count <- virus_values$count[virus_values$Kmer == kmer]
results <- rbind(results, data.frame(
Kmer = kmer,
mean_virus = mean_virus,
sd_virus = sd_virus,
count = count
))
}
return(results)
}
results <- get_stats_segments(v_kmer_pos_df)
count_specific_kmer_in_fastq <- function(fq, specific_kmer) {
sequences <- as.character(sread(fq))
kmer_count <- 0
total_size <- 0
for (seq in sequences) {
total_size <- total_size + nchar(seq)
kmer_count <- kmer_count + (gregexpr(specific_kmer, seq, fixed = TRUE)[[1]] != -1) %>% sum()
}
ratio <- if (total_size > 0) {
kmer_count / total_size
} else {
0
}
return(list(kmer_count = kmer_count, ratio = ratio))
}
calculate_kmer_frequencies <- function(results_df, fq) {
kmers <- results_df$Kmer
results_df$kmer_count <- numeric(length(kmers))
results_df$ratio <- numeric(length(kmers))
for (i in seq_along(kmers)) {
kmer <- kmers[i]
result <- count_specific_kmer_in_fastq(fq, kmer)
results_df$kmer_count[i] <- result$kmer_count
results_df$ratio[i] <- result$ratio
}
return(results_df)
}
fq <- readFastq("../data_processed//testing_data/SRR23079314_1.fastq")
results_df <- calculate_kmer_frequencies(results, fq)
results_df <- calculate_kmer_frequencies(results, fq)
results_df$frequency_virus <- 1 / (10 ^ results_df$mean_virus)
library(ggplot2)
# Create new columns for the X and Y axes
results_df$x_value <- results_df$kmer_count / results_df$sd_virus  # X-axis values
results_df$y_value <- log2(results_df$frequency_virus / results_df$ratio)  # Y-axis values
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
results_df$y_value <- results_df$frequency_virus / results_df$ratio  # Y-axis values
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
results_df$y_value <- log2(results_df$frequency_virus / results_df$ratio)  # Y-axis values
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
# Create new columns for the X and Y axes
results_df$x_value <- results_df$count / results_df$sd_virus  # X-axis values
results_df$y_value <- log2(results_df$frequency_virus / results_df$ratio)  # Y-axis values
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
results_df
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "1/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
# Plotting with kmer names as labels
ggplot(results_df, aes(x = x_value, y = y_value)) +
geom_text(aes(label = Kmer), vjust = -0.5, size = 3) +  # Using geom_text to label with Kmer names
labs(title = "Scatter Plot of 1/sd_virus vs log2(frequency_virus/ratio)",
x = "count_virus/sd_virus",
y = "log2(frequency_virus/ratio)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1))
setwd("~/Documents/University/ULB/Stage/CTMA/CTMA_Internship_MobVec_Viral_KMERS/script/V1/k_mers_profile")
devtools::install()
download_data <- function(accession_id,output_dir,n_reads){
fastq_dump_command <- c(
"run",
"--rm",
"-v", paste0(normalizePath(output_dir), ":/output"),
"ncbi/sra-tools",
"fastq-dump",
accession_id,
"--outdir", "/output",
"--split-files",
paste0("-X ",n_reads)
)
# Run the Docker command
system2("docker", args = fastq_dump_command, stdout = TRUE, stderr = TRUE)
}
accession_id <- "SRR23079314"
output_dir <- "../data/testing_data"
download_data(accession_id,output_dir,10000)
setwd("~/Documents/University/ULB/Stage/CTMA/CTMA_Internship_MobVec_Viral_KMERS/script/V2")
accession_id <- "SRR23079314"
output_dir <- paste0("../../data_processed/vector/RNA_seq/",accession_id,".fastq")
download_data(accession_id,output_dir,10000)
download_data <- function(accession_id, output_dir, n_reads) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
fastq_dump_command <- c(
"run",
"--rm",
"-v", paste0(normalizePath(output_dir), ":/output"),
"ncbi/sra-tools",
"fastq-dump",
accession_id,
"--outdir", "/output",
"--split-files",
paste0("-X ", n_reads)
)
# Run the Docker command
system2("docker", args = fastq_dump_command, stdout = TRUE, stderr = TRUE)
}
accession_id <- "SRR23079314"
output_dir <- "../../data_processed/vector/RNA_seq"
download_data(accession_id, output_dir, 10000)
