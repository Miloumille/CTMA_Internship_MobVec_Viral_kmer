main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
}
i
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i=10
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
=11
i=11
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i=12
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i=13
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i
i=14
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i
i=15
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i=16
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
ref_genome <- readDNAStringSet(reference)
alignments <- readGAlignments(bam)
name <- seqnames(alignments)@values
coverage_values <- as.numeric(coverage(alignments)[[name]])
positions <- seq_along(coverage_values)
virus_ranges <- GRanges(
seqnames = name,
ranges = IRanges(start = positions, width = 10),
score = coverage_values
)
coverage_track <- DataTrack(
range = virus_ranges,          # your data
type = "histogram",           # type of track
name = "Coverage",            # track title
ylab = "Read Depth",          # y-axis label
col.histogram = "steelblue"    # color
)
displayPars(coverage_track) <- list(
background.panel = "white",   # background of the plotting area (y-axis area)
background.title = "white",   # background of the track title
col.axis = "black",           # axis lines and tick marks
col.title = "black",          # y-axis title text
col.frame = NA                # remove border (optional)
)
axisTrack <- GenomeAxisTrack()
pdf(paste0("data_sequencing/",sample_file,"/cov_plot/",fasta_files[i],file_name,".pdf"),width=10,height = 3)
plotTracks(
list(coverage_track, axisTrack),
from = 1,
to = length(ref_genome[[1]]),
col.axis = "black",
main = paste0("Read Coverage - Aedes Albopictus - ", names[i]),
cex.main = 1.2
)
dev.off(dev.list()["pdf"])
i=10
bam <- paste0("data_sequencing/",sample_file,"/mapped_sorted_BAM/",fasta_files[i],"_mapped_sorted",file_name,".bam")
alignments <- readGAlignments(bam)
alignments
bam
fastq_file <- "data_sequencing/5/raw/barcode09.fastq.gz"
fastq_data <- readFastq(fastq_file)
length(fastq_data)
fastq_file <- "data_sequencing/5/raw/barcode10.fastq.gz"
fastq_data <- readFastq(fastq_file)
length(fastq_data)
fastq_file <- "data_sequencing/5/raw/barcode11.fastq.gz"
fastq_data <- readFastq(fastq_file)
length(fastq_data)
fastq_file <- "data_sequencing/5/raw/barcode12.fastq.gz"
fastq_data <- readFastq(fastq_file)
length(fastq_data)
View(positions1)
reference <- "data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta"
fasta_files <- sprintf("barcode%02d", 1:16)
sample_file <- "5"
file_name <- "_virus"
library(Biostrings)
library(stringr)
library(dplyr)
library(ggplot2)
library(KmerEnrich)
library(data.table)
library(ShortRead)
virus_genome_path <- "../data_processed/virus/dengue/dengue_type_2/"
vector_genome_path <- c("../data_processed/vector/aedes/aegypty/SRR14655772")#,
#"../data_processed/vector/aedes/albopictus/SRR8482204")
k <- 4
x <- 500
best_kmers_list <- common_kmers(virus_genome_path,k,x)
v_kmer_pos_df <- kmers_pos_df(virus_genome_path,best_kmers_list)
v_kmers_stats <- get_virus_stats_kmers(v_kmer_pos_df)
complete_kmer_stats <- get_vector_stats_kmers(v_kmers_stats, vector_genome_path)
complete_kmer_stats <- complete_kmer_stats %>%
filter(mean_count > 5)
ggplot(complete_kmer_stats, aes(x = Distribution_score, y = Enrichment_score, color = accession_id)) +
geom_line(aes(group = Kmer), color = "grey", linetype = "dashed") +
geom_point(shape = 16, size = 2) +
geom_text(aes(label = paste0(Kmer, "\n", mean_count)),
vjust = -0.5, size = 2, show.legend = FALSE) +
labs(title = "frequency_virus / frequency_mos",
x = "mean count per virus / max log10 segment in virus genome",
y = " frequency virus / frequency mos") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats$Distribution_score) * 1.05,
y = max(complete_kmer_stats$Enrichment_score) * 1.1)
get_stats_kmers_all_types <- function(df_virus) {
# Drop lines that correspond to the distance between first nucleotide and first kmer
df_virus <- df_virus %>%
filter(!is.na(segm_size))
virus_values <- df_virus %>%
group_by(SequenceName, Kmer,Type) %>%
summarize(mean_segm_size = mean(log10(segm_size), na.rm = TRUE),
sd_segm_size = ifelse(n() > 1, sd(log10(segm_size), na.rm = TRUE), 0),
count = n(),
freq = n()/max(Position),
.groups = 'drop')
results <- virus_values %>%
group_by(Kmer) %>%
summarize(
mean_mean_log10_segments = mean(mean_segm_size, na.rm = TRUE),
mean_sd_log10_segments = mean(sd_segm_size, na.rm = TRUE),
mean_count = mean(count, na.rm = TRUE),
sd_count = ifelse(n() > 1, sd(count, na.rm = TRUE), NA),
mean_freq_virus = mean(freq, na.rm = TRUE),
.groups = 'drop'
)
return(results)
}
v_kmers_stats <- get_stats_kmers_all_types(v_kmer_pos_df)
complete_kmer_stats <- get_vector_stats_kmers(v_kmers_stats, vector_genome_path)
complete_kmer_stats$x_value <- complete_kmer_stats$mean_count / mean(c(mean(complete_kmer_stats$mean_sd_log10_segments),complete_kmer_stats$mean_sd_log10_segments))
complete_kmer_stats$y_value <- (log10(complete_kmer_stats$mean_freq_virus) - log10(complete_kmer_stats$freq_m))
log10(complete_kmer_stats$mean_freq_virus)
log10(complete_kmer_stats$freq_m)
complete_kmer_stats$freq_m)
complete_kmer_stats$freq_m
complete_kmer_stats$freq_vector
complete_kmer_stats$y_value <- (log10(complete_kmer_stats$mean_freq_virus) / log10(complete_kmer_stats$freq_vector))
complete_kmer_stats_filtered <- complete_kmer_stats %>%
group_by(Kmer) %>%
filter(all(mean_count > 10)) %>%
ungroup()
# Now plot the filtered data
ggplot(complete_kmer_stats_filtered, aes(x = x_value, y = y_value, color = Kmer, shape = accession_id)) +
geom_point(size = 2) +  # Points for each observation
labs(title = "frequency_virus / frequency_mos",
x = "count per virus / sd segm virus",
y = " log10(frequency virus) - log10(frequency mos)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats_filtered$x_value) * 1.05,
y = max(complete_kmer_stats_filtered$y_value) * 1.1)
virus_genome_path <- "../data_processed/virus/dengue/dengue_type_2/"
vector_genome_path <- c("../data_processed/vector/aedes/aegypty/SRR14655772")#,
#"../data_processed/vector/aedes/albopictus/SRR8482204")
k <- 5
x <- 500
best_kmers_list <- common_kmers(virus_genome_path,k,x)
v_kmer_pos_df <- kmers_pos_df(virus_genome_path,best_kmers_list)
v_kmers_stats <- get_virus_stats_kmers(v_kmer_pos_df)
complete_kmer_stats <- get_vector_stats_kmers(v_kmers_stats, vector_genome_path)
complete_kmer_stats <- complete_kmer_stats %>%
filter(mean_count > 5)
ggplot(complete_kmer_stats, aes(x = Distribution_score, y = Enrichment_score, color = accession_id)) +
geom_line(aes(group = Kmer), color = "grey", linetype = "dashed") +
geom_point(shape = 16, size = 2) +
geom_text(aes(label = paste0(Kmer, "\n", mean_count)),
vjust = -0.5, size = 2, show.legend = FALSE) +
labs(title = "frequency_virus / frequency_mos",
x = "mean count per virus / max log10 segment in virus genome",
y = " frequency virus / frequency mos") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats$Distribution_score) * 1.05,
y = max(complete_kmer_stats$Enrichment_score) * 1.1)
get_stats_kmers_all_types <- function(df_virus) {
# Drop lines that correspond to the distance between first nucleotide and first kmer
df_virus <- df_virus %>%
filter(!is.na(segm_size))
virus_values <- df_virus %>%
group_by(SequenceName, Kmer,Type) %>%
summarize(mean_segm_size = mean(log10(segm_size), na.rm = TRUE),
sd_segm_size = ifelse(n() > 1, sd(log10(segm_size), na.rm = TRUE), 0),
count = n(),
freq = n()/max(Position),
.groups = 'drop')
results <- virus_values %>%
group_by(Kmer) %>%
summarize(
mean_mean_log10_segments = mean(mean_segm_size, na.rm = TRUE),
mean_sd_log10_segments = mean(sd_segm_size, na.rm = TRUE),
mean_count = mean(count, na.rm = TRUE),
sd_count = ifelse(n() > 1, sd(count, na.rm = TRUE), NA),
mean_freq_virus = mean(freq, na.rm = TRUE),
.groups = 'drop'
)
return(results)
}
v_kmers_stats <- get_stats_kmers_all_types(v_kmer_pos_df)
complete_kmer_stats <- get_vector_stats_kmers(v_kmers_stats, vector_genome_path)
complete_kmer_stats$x_value <- complete_kmer_stats$mean_count / mean(c(mean(complete_kmer_stats$mean_sd_log10_segments),complete_kmer_stats$mean_sd_log10_segments))
complete_kmer_stats$y_value <- (log10(complete_kmer_stats$mean_freq_virus) / log10(complete_kmer_stats$freq_vector))
complete_kmer_stats_filtered <- complete_kmer_stats %>%
group_by(Kmer) %>%
filter(all(mean_count > 10)) %>%
ungroup()
# Now plot the filtered data
ggplot(complete_kmer_stats_filtered, aes(x = x_value, y = y_value, color = Kmer, shape = accession_id)) +
geom_point(size = 2) +  # Points for each observation
labs(title = "frequency_virus / frequency_mos",
x = "count per virus / sd segm virus",
y = " log10(frequency virus) / log10(frequency mos)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats_filtered$x_value) * 1.05,
y = max(complete_kmer_stats_filtered$y_value) * 1.1)
complete_kmer_stats_filtered <- complete_kmer_stats %>%
group_by(Kmer) %>%
filter(all(mean_count > 20)) %>%
ungroup()
# Now plot the filtered data
ggplot(complete_kmer_stats_filtered, aes(x = x_value, y = y_value, color = Kmer, shape = accession_id)) +
geom_point(size = 2) +  # Points for each observation
labs(title = "frequency_virus / frequency_mos",
x = "count per virus / sd segm virus",
y = " log10(frequency virus) / log10(frequency mos)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats_filtered$x_value) * 1.05,
y = max(complete_kmer_stats_filtered$y_value) * 1.1)
complete_kmer_stats <- complete_kmer_stats %>%
filter(mean_count > 5)
ggplot(complete_kmer_stats, aes(x = Distribution_score, y = Enrichment_score, color = accession_id)) +
geom_line(aes(group = Kmer), color = "grey", linetype = "dashed") +
geom_point(shape = 16, size = 2) +
geom_text(aes(label = paste0(Kmer, "\n", mean_count)),
vjust = -0.5, size = 2, show.legend = FALSE) +
labs(title = "frequency_virus / frequency_mos",
x = "mean count per virus / sd segment in virus genome",
y = " frequency virus / frequency mos") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats$Distribution_score) * 1.05,
y = max(complete_kmer_stats$Enrichment_score) * 1.1)
v_kmer_pos_df <- kmers_pos_df(virus_genome_path,best_kmers_list)
v_kmers_stats <- get_virus_stats_kmers(v_kmer_pos_df)
complete_kmer_stats <- get_vector_stats_kmers(v_kmers_stats, vector_genome_path)
complete_kmer_stats <- complete_kmer_stats %>%
filter(mean_count > 5)
ggplot(complete_kmer_stats, aes(x = Distribution_score, y = Enrichment_score, color = accession_id)) +
geom_line(aes(group = Kmer), color = "grey", linetype = "dashed") +
geom_point(shape = 16, size = 2) +
geom_text(aes(label = paste0(Kmer, "\n", mean_count)),
vjust = -0.5, size = 2, show.legend = FALSE) +
labs(title = "frequency_virus / frequency_mos",
x = "mean count per virus / sd segment in virus genome",
y = " frequency virus / frequency mos") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
expand_limits(x = max(complete_kmer_stats$Distribution_score) * 1.05,
y = max(complete_kmer_stats$Enrichment_score) * 1.1)
