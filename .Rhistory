write.csv(kmer_df, file = paste("data/kmers/", k, "_mer_table.csv", sep = ""), row.names = FALSE)
return(kmers)
}
k <- 3
generate_kmers(k)
generate_kmers(k)
k <- 4
generate_kmers(k)
k <- 5
generate_kmers(k)
k <- 6
generate_kmers(k)
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
sequences = readDNAStringSet("data/blast/gisaid_epiflu_sequence.fasta")
sequence_names <- names(data)
sequence_names <- names(data)
k <- 3
# Function to count k-mers in sequences
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
# Initialize a data frame to store the results
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
library(Biostrings)
library(Biostrings)
library(stringr)
library(dplyr)
library(randomForest)
library(parallel)
library(data.table)
library(Biostrings)
library(stringr)
library(dplyr)
library(randomForest)
library(parallel)
library(data.table)
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
sequence_names <- names(data)
data
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
kmers <- kmer_table$kmer
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
k_mers_count_list <- mclapply(seq_along(genome), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genome[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_table)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genome), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genome[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
View(kmer_table)
View(k_mers_count_table)
View(k_mers_count_list)
View(kmer_table)
k_mers_count_list <- mclapply(seq_along(genome), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genome[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
View(k_mers_count_table)
View(kmer_table)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
k_mers_count_list
View(k_mers_count_list)
generate_kmers <- function(k) {
bases <- c("A", "C", "G", "T")
kmers <- expand.grid(rep(list(bases), k))
kmers <- apply(kmers, 1, paste, collapse = "")
kmer_df <- data.frame(kmer = kmers)
write.csv(kmer_df, file = paste("data/kmers/", k, "_mer_table.csv", sep = ""), row.names = FALSE)
return(kmers)
}
k <- 3
generate_kmers(k)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genome), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genome[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_list)
View(k_mers_count_table)
k_mers_count_table
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_table
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- count_kmers_in_sequence(genome,kmer)
}
genome
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_table)
View(k_mers_count_list)
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
# Function to count k-mers in sequences
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
# Initialize a data frame to store the results
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genome = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_table)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
k_mers_count_list <- mclapply(seq_along(sequences), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(sequences[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(genomes, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
fwrite(k_mers_count_table, file = paste("data/kmers/",k, "_mer_counts_in_sequences.csv", sep = ""))
k <- 3
# Read the k-mer table from the CSV
kmer_table <- read.csv(paste("data/kmers/", k, "_mer_table.csv", sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
# Function to count k-mers in a sequence
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
# Read the genome sequences
genomes <- readDNAStringSet("data/virus/dengue_type_1.fasta")
sequence_names <- names(genomes)
# Initialize a list to store results
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- as.data.frame(do.call(rbind, k_mers_count_list))
colnames(k_mers_count_table) <- c("sequence_name", kmers)
# Save the result to a CSV file
fwrite(k_mers_count_table, file = paste("data/kmers/", k, "_mer_counts_in_sequences.csv", sep = ""))
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(genomes, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Convert the list to a data frame
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_table)
View(k_mers_count_list)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
fwrite(k_mers_count_table, file = paste("data/kmers/",k, "_mer_counts_in_sequences.csv", sep = ""))
View(k_mers_count_table)
sequence_names <- names(data)
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
View(k_mers_count_table)
k_mers_count_table <- do.call(rbind, k_mers_count_list)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
View(k_mers_count_table)
colnames(k_mers_count_table) <- c("sequence_name", kmers)
k_mers_count_table <- do.call(rbind, k_mers_count_list)
View(k_mers_count_table)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
sequence_names <- names(data)
k_mers_count_table <- data.frame(
sequence_name = character(),
stringsAsFactors = FALSE
)
# Add columns for each k-mer to store counts
for (kmer in kmers) {
k_mers_count_table[[kmer]] <- numeric()
}
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
k_mers_count_table <- do.call(rbind, k_mers_count_list)
fwrite(k_mers_count_table, file = paste("data/kmers/",k, "_mer_counts_in_sequences.csv", sep = ""))
View(k_mers_count_table)
k <- 3
kmer_table <- read.csv(paste("data/kmers/",k,"_mer_table.csv",sep = ""), stringsAsFactors = FALSE)
kmers <- kmer_table$kmer
count_kmers_in_sequence <- function(sequence, kmers) {
kmer_counts <- sapply(kmers, function(kmer) {
countPattern(kmer, sequence)
})
return(kmer_counts)
}
genomes = readDNAStringSet("data/virus/dengue_type_1.fasta")
sequence_names <- names(genomes)  # Corrected here to use genomes
k_mers_count_list <- mclapply(seq_along(genomes), function(i) {
sequence_name <- sequence_names[i]
sequence <- as.character(genomes[[i]])
kmer_counts <- count_kmers_in_sequence(sequence, kmers)
c(sequence_name, as.numeric(kmer_counts))
}, mc.cores = parallel::detectCores() - 1)
# Create the table with sequence names and k-mers as column names
k_mers_count_table <- data.frame(do.call(rbind, k_mers_count_list))
colnames(k_mers_count_table) <- c("sequence_name", kmers)  # Set the column names properly
fwrite(k_mers_count_table, file = paste("data/kmers/",k, "_mer_counts_in_sequences.csv", sep = ""))
View(k_mers_count_table)
View(k_mers_count_table)
