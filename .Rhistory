starts <- start(kmer_pos)
ends <- end(kmer_pos)
return(data.frame(start = starts, end = ends, strand = "+"))
}
# Create genome axis track
genomeTrack <- GenomeAxisTrack()
# Create a list to store the annotation tracks
kmerTracks <- list()
# Read the reference genome from the first file
reference_genome <- readDNAStringSet(fasta_paths[1])[[1]]
# Create the reference k-mer track
kmerTracks[[1]] <- AnnotationTrack(start = find_kmer_positions(fasta_paths[1], kmer)$start,
end = find_kmer_positions(fasta_paths[1], kmer)$start + 1,
name = "Reference", chromosome = "chr1", fill = "red", height = 0.5)
# Define colors for the variants (other than the reference)
variant_colors <- c("blue", "green", "orange")
# Loop through the other FASTA files and create corresponding annotation tracks
for (i in 2:length(fasta_paths)) {
variant_name <- paste("Variant", i - 1, sep = " ")
df_variant <- find_kmer_positions(fasta_paths[i], kmer)
kmerTracks[[i]] <- AnnotationTrack(start = df_variant$start,
end = df_variant$start + 1,
name = variant_name,
chromosome = "chr1",
fill = variant_colors[i - 1],
height = 0.5)
}
# Calculate genome length (using the reference genome)
genome_length <- nchar(reference_genome)
# Plot tracks together
plotTracks(kmerTracks, from = 1, to = genome_length, margin = 10, sizes = rep(0.5, length(kmerTracks)), stacking = "dense")
library(Gviz)
library(Biostrings)
# Define the vector of paths to the FASTA files
fasta_paths <- c(
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta",
"../data_processed/virus/dengue/dengue_type_3/NC_001475.2.fasta",
"../data_processed/virus/dengue/dengue_type_4/NC_002640.1.fasta"
)
# Define the k-mer of interest
kmer <- "AGAGAG"
# Function to read a FASTA file and find k-mer positions
find_kmer_positions <- function(fasta_path, kmer) {
genome <- readDNAStringSet(fasta_path)[[1]]  # Read the genome from FASTA file
kmer_pos <- matchPattern(kmer, genome)
starts <- start(kmer_pos)
ends <- end(kmer_pos)
return(data.frame(start = starts, end = ends, strand = "+"))
}
# Create genome axis track
genomeTrack <- GenomeAxisTrack()
# Create a list to store the annotation tracks
kmerTracks <- list()
# Read the reference genome from the first file
reference_genome <- readDNAStringSet(fasta_paths[1])[[1]]
# Extract the name for the reference track from the filename
reference_name <- sub(".fasta$", "", basename(fasta_paths[1]))
# Create the reference k-mer track
kmerTracks[[1]] <- AnnotationTrack(start = find_kmer_positions(fasta_paths[1], kmer)$start,
end = find_kmer_positions(fasta_paths[1], kmer)$start + 1,
name = reference_name, chromosome = "chr1", fill = "red", height = 0.5)
# Define colors for the variants (other than the reference)
variant_colors <- c("blue", "green", "orange")
# Loop through the other FASTA files and create corresponding annotation tracks
for (i in 2:length(fasta_paths)) {
# Extract the name for each variant from the filename
variant_name <- sub(".fasta$", "", basename(fasta_paths[i]))
df_variant <- find_kmer_positions(fasta_paths[i], kmer)
kmerTracks[[i]] <- AnnotationTrack(start = df_variant$start,
end = df_variant$start + 1,
name = variant_name,
chromosome = "chr1",
fill = variant_colors[i - 1],
height = 0.5)
}
# Calculate genome length (using the reference genome)
genome_length <- nchar(reference_genome)
# Plot tracks together
plotTracks(kmerTracks, from = 1, to = genome_length, margin = 10, sizes = rep(0.5, length(kmerTracks)), stacking = "dense")
library(Gviz)
library(Biostrings)
# Define the vector of paths to the FASTA files
fasta_paths <- c(
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta",
"../data_processed/virus/dengue/dengue_type_3/NC_001475.2.fasta",
"../data_processed/virus/dengue/dengue_type_4/NC_002640.1.fasta"
)
# Define the k-mer of interest
kmer <- "AGAGAG"
# Function to read a FASTA file and find k-mer positions
find_kmer_positions <- function(fasta_path, kmer) {
genome <- readDNAStringSet(fasta_path)[[1]]  # Read the genome from FASTA file
kmer_pos <- matchPattern(kmer, genome)
starts <- start(kmer_pos)
ends <- end(kmer_pos)
return(data.frame(start = starts, end = ends, strand = "+"))
}
# Create a list to store the annotation tracks
kmerTracks <- list()
# Read the reference genome from the first file
reference_genome <- readDNAStringSet(fasta_paths[1])[[1]]
# Extract the name for the reference track from the filename
reference_name <- sub(".fasta$", "", basename(fasta_paths[1]))
# Create the reference k-mer track
kmerTracks[[1]] <- AnnotationTrack(start = find_kmer_positions(fasta_paths[1], kmer)$start,
end = find_kmer_positions(fasta_paths[1], kmer)$start + 1,
name = reference_name, chromosome = "chr1", fill = "red", height = 0.5)
# Define colors for the variants (other than the reference)
variant_colors <- c("blue", "green", "orange")
# Loop through the other FASTA files and create corresponding annotation tracks
for (i in 2:length(fasta_paths)) {
# Extract the name for each variant from the filename
variant_name <- sub(".fasta$", "", basename(fasta_paths[i]))
df_variant <- find_kmer_positions(fasta_paths[i], kmer)
kmerTracks[[i]] <- AnnotationTrack(start = df_variant$start,
end = df_variant$start + 1,
name = variant_name,
chromosome = "chr1",
fill = variant_colors[i - 1],
height = 0.5)
}
# Calculate genome length (using the reference genome)
genome_length <- nchar(reference_genome)
# Plot tracks together horizontally
plotTracks(kmerTracks,
from = 1, to = genome_length,
margin = 10,
sizes = rep(0.5, length(kmerTracks)),
stacking = "horizontal")
# Plot tracks together horizontally
plotTracks(kmerTracks,
from = 1, to = genome_length,
margin = 10,
sizes = rep(0.5, length(kmerTracks)),
stacking = "dense",
rotate = 90)
# Plot tracks together horizontally
plotTracks(kmerTracks,
from = 1, to = genome_length,
margin = 10,
sizes = rep(0.5, length(kmerTracks)),
stacking = "dense",
rotate = 0)
# Plot tracks together
plotTracks(kmerTracks, from = 1, to = genome_length, margin = 10, sizes = rep(0.5, length(kmerTracks)), stacking = "dense")
# Plot tracks together
plotTracks(kmerTracks, from = 1, to = genome_length, margin = 10, sizes = rep(0.5, length(kmerTracks)), stacking = "dense")
# Define the vector of paths to the FASTA files
fasta_paths <- c(
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta",
"../data_processed/virus/dengue/dengue_type_3/NC_001475.2.fasta",
"../data_processed/virus/dengue/dengue_type_4/NC_002640.1.fasta"
)
# Define the k-mer of interest
kmer <- "AGAGAG"
# Function to read a FASTA file and find k-mer positions
find_kmer_positions <- function(fasta_path, kmer) {
genome <- readDNAStringSet(fasta_path)[[1]]  # Read the genome from FASTA file
kmer_pos <- matchPattern(kmer, genome)
starts <- start(kmer_pos)
ends <- end(kmer_pos)
return(data.frame(start = starts, end = ends, strand = "+"))
}
# Create a list to store the annotation tracks
kmerTracks <- list()
# Read the reference genome from the first file
reference_genome <- readDNAStringSet(fasta_paths[1])[[1]]
# Create the reference k-mer track
kmerTracks[[1]] <- AnnotationTrack(start = find_kmer_positions(fasta_paths[1], kmer)$start,
end = find_kmer_positions(fasta_paths[1], kmer)$start + 1,
name = "Reference", chromosome = "chr1", fill = "red", height = 0.5)
# Define colors for the variants (other than the reference)
variant_colors <- c("blue", "green", "orange")
# Loop through the other FASTA files and create corresponding annotation tracks
for (i in 2:length(fasta_paths)) {
variant_name <- paste("Variant", i - 1, sep = " ")
df_variant <- find_kmer_positions(fasta_paths[i], kmer)
kmerTracks[[i]] <- AnnotationTrack(start = df_variant$start,
end = df_variant$start + 1,
name = variant_name,
chromosome = "chr1",
fill = variant_colors[i - 1],
height = 0.5)
}
# Plot tracks together
plotTracks(kmerTracks, from = 1, to = genome_length, margin = 10, sizes = rep(0.5, length(kmerTracks)), stacking = "dense")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Simulate the genome data (example: 5 genomes, each 100 positions long)
set.seed(123)
num_genomes <- 5
genome_length <- 100
positions <- 1:genome_length
# Create a matrix of presence/absence of k-mers
# 1 indicates presence, 0 indicates absence
presence_matrix <- matrix(sample(0:1, num_genomes * genome_length, replace = TRUE),
nrow = num_genomes, ncol = genome_length)
# Convert to a data frame for ggplot
df <- melt(presence_matrix)
colnames(df) <- c("Genome", "Position", "Presence")
# Plot with faceting
ggplot(df, aes(x = Position, y = Presence)) +
geom_point(size = 2) +
scale_y_continuous(breaks = c(0, 1), labels = c("Absent", "Present")) +
labs(title = "K-mer Presence Across Genomes",
x = "Position",
y = "Presence") +
facet_wrap(~ Genome, scales = "free_y") +  # Faceting by genome, independent y-axis
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(reshape2)
# Simulate the genome data (example: 5 genomes, each 100 positions long)
set.seed(123)
num_genomes <- 5
genome_length <- 100
positions <- 1:genome_length
# Create a matrix of presence/absence of k-mers
# 1 indicates presence, 0 indicates absence
presence_matrix <- matrix(sample(0:1, num_genomes * genome_length, replace = TRUE),
nrow = num_genomes, ncol = genome_length)
# Convert to a data frame for ggplot
df <- melt(presence_matrix)
colnames(df) <- c("Genome", "Position", "Presence")
# Filter out the rows where the k-mer is absent (Presence == 0)
df <- df[df$Presence == 1, ]
# Plot with horizontal lines for each genome
ggplot(df, aes(x = Position, y = factor(Genome), color = factor(Genome))) +
geom_point(size = 3, shape = 16) +  # Add points (dots) at the positions where k-mer is found
scale_color_manual(values = RColorBrewer::brewer.pal(num_genomes, "Set3")) +
labs(title = "K-mer Presence Across Genomes",
x = "Genomic Position",
y = "Genome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
coord_cartesian(clip = 'off')
library(ggplot2)
library(Biostrings)
library(reshape2)
# Define the vector of paths to the FASTA files
fasta_paths <- c(
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta",
"../data_processed/virus/dengue/dengue_type_3/NC_001475.2.fasta",
"../data_processed/virus/dengue/dengue_type_4/NC_002640.1.fasta"
)
# Define the k-mer of interest
kmer <- "AGAGAG"
# Function to read a FASTA file and find k-mer positions
find_kmer_positions <- function(fasta_path, kmer) {
genome <- readDNAStringSet(fasta_path)[[1]]  # Read the genome from FASTA file
kmer_pos <- matchPattern(kmer, genome)  # Find all positions of the k-mer
starts <- start(kmer_pos)  # Get the start positions of the matches
return(data.frame(Position = starts, Genome = basename(fasta_path)))  # Return positions with genome name
}
# Create an empty list to store the data frames for each genome
kmer_data_list <- list()
# Loop through each FASTA file and extract k-mer positions
for (i in 1:length(fasta_paths)) {
kmer_data_list[[i]] <- find_kmer_positions(fasta_paths[i], kmer)
}
# Combine all the k-mer data into one data frame
kmer_data <- do.call(rbind, kmer_data_list)
# Now, let's plot the k-mer positions using ggplot2
ggplot(kmer_data, aes(x = Position, y = Genome, color = Genome)) +
geom_point(size = 3, shape = 16) +  # Add points (dots) at the positions where k-mer is found
labs(title = paste("K-mer Presence: ", kmer),
x = "Genomic Position",
y = "Genome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3") +  # Assign a color palette to the genomes
coord_cartesian(clip = 'off')
# Define the vector of paths to the FASTA files
fasta_paths <- c(
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/NC_001477.1.fasta",
"../data_processed/virus/dengue/dengue_type_2/NC_001474.2.fasta",
"../data_processed/virus/dengue/dengue_type_3/NC_001475.2.fasta",
"../data_processed/virus/dengue/dengue_type_4/NC_002640.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/PQ357536.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/PQ357537.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/PQ357538.1.fasta",
"../data_processed/virus/dengue/dengue_type_1/PQ357540.1.fasta"
)
# Function to read a FASTA file and find k-mer positions
find_kmer_positions <- function(fasta_path, kmer) {
genome <- readDNAStringSet(fasta_path)[[1]]  # Read the genome from FASTA file
kmer_pos <- matchPattern(kmer, genome)  # Find all positions of the k-mer
starts <- start(kmer_pos)  # Get the start positions of the matches
return(data.frame(Position = starts, Genome = basename(fasta_path)))  # Return positions with genome name
}
# Create an empty list to store the data frames for each genome
kmer_data_list <- list()
# Loop through each FASTA file and extract k-mer positions
for (i in 1:length(fasta_paths)) {
kmer_data_list[[i]] <- find_kmer_positions(fasta_paths[i], kmer)
}
# Combine all the k-mer data into one data frame
kmer_data <- do.call(rbind, kmer_data_list)
# Now, let's plot the k-mer positions using ggplot2
ggplot(kmer_data, aes(x = Position, y = Genome, color = Genome)) +
geom_point(size = 3, shape = 16) +  # Add points (dots) at the positions where k-mer is found
labs(title = paste("K-mer Presence: ", kmer),
x = "Genomic Position",
y = "Genome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3") +  # Assign a color palette to the genomes
coord_cartesian(clip = 'off')
# Now, let's plot the k-mer positions using ggplot2
ggplot(kmer_data, aes(x = Position, y = Genome, color = Genome)) +
geom_point(size = 3, shape = 16) +  # Add points (dots) at the positions where k-mer is found
labs(title = paste("K-mer Presence: ", kmer),
x = "Genomic Position",
y = "Genome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3") +  # Assign a color palette to the genomes
coord_cartesian(clip = 'off')
# Now, let's plot the k-mer positions using ggplot2
ggplot(kmer_data, aes(x = Position, y = Genome, color = Genome)) +
geom_point(size = 1, shape = 16) +  # Add points (dots) at the positions where k-mer is found
labs(title = paste("K-mer Presence: ", kmer),
x = "Genomic Position",
y = "Genome") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Set3") +  # Assign a color palette to the genomes
coord_cartesian(clip = 'off')
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
virus_folder <- "data_processed/virus/dengue/"
vector_genome_path <- c("data_processed/vector/aedes/aegypty/SRR23079314")
k <- c(3,4,5,6)
x <- 100
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
virus_folder <- "data_processed/virus/dengue/"
vector_genome_path <- c("data_processed/vector/aedes/aegypty/SRR23079314")
k <- c(3,4,5,6)
x <- 100
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
virus_folder <- "data_processed/virus/dengue/"
vector_genome_path <- c("data_processed/vector/aedes/aegypty/SRR23079314")
k <- c(3,4,5,6)
x <- 100
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
k <- c(3,4,5,6)
x <- 500
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
virus_folder <- "data_processed/virus/dengue/"
vector_genome_path <- c("data_processed/vector/aedes/aegypty/SRR23079314")
k <- c(3,4,5,6)
x <- 100
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
library(KmerEnrich)
library(ShortRead)
library(psych)
library(dplyr)
library(ggplot2)
library(tidyr)
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
virus_folder <- "data_processed/virus/dengue/"
vector_genome_path <- c("data_processed/vector/aedes/aegypty/SRR23079314")
k <- c(3,4,5,6)
x <- 100
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
k <- c(5,6)
x <- 500
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
length("test")
nchar("test")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
detach("package:KmerEnrich", unload = TRUE)
library(KmerEnrich)
KmerEnrichFullReport(virus_folder, vector_genome_path, k, x,"my_report2.html")
